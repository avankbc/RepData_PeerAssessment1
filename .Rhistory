install.packages("swirl")
library("swirl")
swirl()
lilbrary("swirl")
lilbrary("swirl")
library("swirl")
swirl()
5+7
x<-5+7
x
x-3
y<x-3
y<-x-3
y
z<-c(1.1,9,3.14)
c()
?c
z
z<-c(z,555)
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,1000)
c(1,2,3,4) + c(0,10,1000)
z * 2+1000
my_div
swirl()
library(swirl)
library("swirl)
exit
library("swirl")
swirl()
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Regression Models")
install_from_swirl("Data Analytics")
install_from_swirl("Data Analysis")
install_from_swirl("R Programming")
swirl()
swirl()
library("swirl")
swirl()
1:20
pi:10
15:1
?:
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- 0.5,55,-10,6
num_vect <- (0.5,55,-10,6)
num_vect(0.5,55,-10,6)
num_vect<- c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<- c(My, name, is)
my_char<- c("My", "name", "is")
my_char
paste(my_char, collapse = "")
paste(my_char, collapse = " ")
my_name<- c(my_char,"Avan")
my_name
paste(my_name, collapse= " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3),c("X","Y","Z"),sep="")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA,
| 5, NA)
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data<-sample(c(y, z), 100)
my_na<- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x-c(0,0)
x-c(3,5,7)
x-[c(3,5,7)]
[c(3,5,7)]
a<-c(3,5,7)
info()
x-[c(3,5,7)]
x-c(3,5,7)
skip()
x[0]
x[3000]
x[c(-2, -10)]
x[c(3, 5, 7)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names()
names(foo)
names(vect)
vect2<-c(11,2,"NA")
vect2<-c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_maxtrix<-my_vector
my_matrix <-my_vector
?matrix()
?matrix
my_matrix2<- dim(1:20) <- c(4, 5)
dim(1:20) <- c(4, 5)
my_matrix2<-1:20
maxtrix()
matrix()
matrix(1:20)
skip()
identical(my_matrix,my_matrix2)
patients
c("Bill","Gina","Kelly",Sean)
patients<-c("Bill","Gina","Kelly",Sean)
patients<- c("Bill","Gina","Kelly",Sean)
skip()
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating","test")
colnames(1)
colnames(my_data) <- cnames
my_data
install.packages("devtools")
library(devtools)
find_rtools
find_rtools()
setwd("C:/Users/Avan/Dropbox/AVAN/coursera/Reproducible Research")
setwd("C:/Users/Avan/Dropbox/AVAN/coursera/Reproducible Research/RepData_PeerAssessment1")
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages(c("aplpack", "devtools", "Formula", "Hmisc", "httr", "RCurl", "SparseM", "swirl", "testthat", "UsingR"))
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
averages[which.max(averages$steps),]
missing <- is.na(data$steps)
# How many missing
table(missing)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps)
median(total.steps)
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=weekday.or.weekend)
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
library(knitr)
knit2html("PA1)template.Rmd")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
library(lattice)
weekdays <- weekdays(as.Date(merged$date))
data_weekdays <- transform(merged, day=weekdays)
data_weekdays$wk <- ifelse(data_weekdays$day %in% c("Saturday", "Sunday"),"weekend", "weekday")
average_week <- ddply(data_weekdays, .(interval, wk), summarise, steps=mean(steps))
xyplot(steps ~ interval | wk, data = average_week, layout = c(1, 2), type="l")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
library(lattice)
library(plyr)
imputed.data$date <- as.Date(imputed.data$date)
browseURL("PA1_template.html")
new_data_set$day <- weekdays(as.Date(new_data_set$date))
filled$day <- weekdays(as.Date(filled$date))
filled.data$day <- weekdays(as.Date(filled.data$date))
filled.data$day_type <- ifelse(filled.data$day == "Saturday" | filled.data$day == "Sunday", "Weekend", "Weekday")
mean.steps <- aggregate(filled.data$steps, by = list(filled.data$interval, filled.data$day_type), mean)
names(mean.steps ) <- c("interval", "day_type", "steps")
xyplot(steps ~ interval | day_type, mean.steps, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
filled
filled.data
data
filled.data
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="Total number of steps taken each day")
median(total.steps, na.rm=TRUE)
mean(total.steps, na.rm=TRUE)
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("Average number of steps taken")
averages[which.max(averages$steps),]
missing <- is.na(data$steps)
# How many missing
table(missing)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled
fill
filled.data
filled.data <- data
filled.data
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
